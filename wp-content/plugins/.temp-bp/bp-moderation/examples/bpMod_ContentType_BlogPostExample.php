<?php

// initialize
bpMod_ContentType_BlogPostExample::bootstrap();

/**
 * Example content type class for bp-moderation
 *
 * This is a guideline to understand bp-moderation custom content types
 *
 * in this example all the needed function are static methods of a class,
 * but it could be possible to do it also with an instantiated class or with globals functions.
 * This is the suggested way, if and when I'll change something in content types
 * system I'll assume that the most custom content types are following this.
 *
 * @author francescolaffi
 */
class bpMod_ContentType_BlogPostExample
{

	/**
	 * Initialize this content type
	 *
	 * register content type in bp-moderation (needs to be done at every pageload)
	 *
	 * If this content type needed to place some hooks no matter if it was active or not
	 * this would be the right place, instead hooks needed only when it is active
	 * are in bpMod_ContentType_BlogPostExample::init()
	 *
	 * @return bool if successfully initialized
	 */
	function bootstrap()
	{
		//check if bpModeration exists, especially the method to register content types that will be used just below
		if (!method_exists('bpModeration', 'register_content_type')) {
			return false;
		}

		// internal slug used by bp-moderation to differentiate between content types (alfanumeric and underscore only)
		$slug = 'blog_post_example';

		// this is how content of this type get called in the backend
		$label = __('Blog post example', 'your-text-domain');

		//callbacks are used when some information/operation is needed, see documentation of each one
		$callbacks = array(
			'info' => array(__CLASS__, 'info'), // mandatory
			'init' => array(__CLASS__, 'init'), // not mandatory but you'll probably need it anyway
			'edit' => array(__CLASS__, 'edit'), // not mandatory but suggested if can be edited
			'delete' => array(__CLASS__, 'delete'), // not mandatory but suggested if can be deleted
		);

		//bp-moderation can automatically put the flag button in activities generated from this content type, but needs to know what is their activity type
		$activity_types = array('new_blog_post');

		//register this content type in bp-moderation
		return bpModeration::register_content_type($slug, $label, $callbacks, $activity_types);
	}

	/**
	 * add hooks to place report links (init callback)
	 *
	 * bp-moderation calls this on pageload only if this content type has been activated
	 * from the site admin in the backend. Use this callback to hook around report links
	 * where your content types is displayed.
	 */
	function init()
	{
		// for blog posts we cam just append it after the content ...
		add_filter('the_content', array(__CLASS__, 'append_link'));
		// ... and after the excerpt
		add_filter('the_excerpt', array(__CLASS__, 'append_link'));
	}

	/**
	 * filter post content and excerpt adding the report link
	 *
	 * @param string $content
	 * @return string
	 */
	function append_link($content)
	{
		//only for posts
		if ('post' != get_post_type()) {
			return $content;
		}

		//this is the method that generate the report link, read the method doc and look the defaults for details
		//if this content has also activities is better to have id and id2 consistent with ids used in the activity
		$link = bpModFrontend::get_link(array(
											 'type' => 'blog_post_example',
											 'id' => $GLOBALS['wpdb']->blogid, // the blog id
											 'id2' => get_the_ID(), // the post id
											 'author_id' => get_the_author_meta('id'),
											 'unflagged_text' => __('Flag this post as inappropriate', 'your-text-domain')
										));

		//autop will run after this, so we space with two lines
		return "$content\n\n$link";
	}

	/**
	 * get info on the content identified by id and id2 (info callback)
	 *
	 * this is mandatory and is probably the most important callback, if it does
	 * not return the requested info the content will not be flagged
	 *
	 * the requested info are:
	 * - user id of the author (if author is not a member read 'Contents generated by non members' section in integration readme.txt)
	 * - url of the content (the more accurate and future-proof, the better)
	 * - the date when the content has been posted, mysql format and utc
	 *
	 * in ms install this function could be called from any site, so if the contents
	 * are site specic (posts definitely are) you'll need to use 'switch_to_blog()'
	 * before using any blog specific function and 'restore_current_blog()' after.
	 *
	 * @param int $id  item primary id (blog id)
	 * @param int $id2 item secondary id (post id)
	 * @return array|false author,url,date or false on failure
	 */
	function info($id, $id2)
	{
		switch_to_blog($id);

		$post = get_post($id2);

		restore_current_blog();

		if (!$post) {
			return false;
		}

		return array(
			'author' => $post->post_author,
			'url' => home_url("?p=$id2"), //this link url don't depend on permalink structure and post slug
			'date' => $post->post_date_gmt,
		);
	}

	/**
	 * get edit url for the content identified by id and id2 (edit callback)
	 *
	 * @see bpMod_ContentType_BlogPostExample::info() on why switch_to_blog() and
	 * restore_current_blog() are needed
	 *
	 * @param int $id  item primary id (blog id)
	 * @param int $id2 item secondary id (post id)
	 * @return string edit url
	 */
	function edit($id, $id2)
	{
		switch_to_blog($id);

		$url = admin_url("post.php?post=$id2&action=edit");

		restore_current_blog();

		return $url;
	}

	/**
	 * delete the content identified by id and id2 (delete callback)
	 *
	 * @see bpMod_ContentType_BlogPostExample::info() on why switch_to_blog() and
	 * restore_current_blog() are needed
	 *
	 * @param int $id  item primary id (blog id)
	 * @param int $id2 item secondary id (post id)
	 * @return bool if the content has been delete (or positive also if it does not exist)
	 */
	function delete($id, $id2)
	{
		switch_to_blog($id);

		//return true also if the content does not exists
		$r = !get_post($id2) || wp_delete_post($id2);

		restore_current_blog();

		return $r;
	}
}

?>
